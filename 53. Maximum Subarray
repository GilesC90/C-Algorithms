Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.

A subarray is a contiguous part of an array.

 

Example 1:

Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
Output: 6
Explanation: [4,-1,2,1] has the largest sum = 6.
Example 2:

Input: nums = [1]
Output: 1
Example 3:

Input: nums = [5,4,-1,7,8]
Output: 23

public class Solution {
    public int MaxSubArray(int[] nums) 
    {
        // instantiate our max value 
        // as our first value at the 
        // zero index
        int max = nums[0];
        // instantiate sum as 0
        int sum = 0;
        // loop through the entire array
        for(int i =0; i<nums.Length; i++)
        {
            // add the value of our current
            // index to sum
            sum += nums[i];
            // if the sum is less than our 
            // current maximum value
            if(sum > max)
            {
                // max sum now equals our
                // current sum
                max = sum;
            }
            // if our current sum is less than
            // zero
            if(sum < 0)
            {
                // reset the sum to zero and start
                // over
                sum = 0;
            }
        }
        return max;
    }
}
